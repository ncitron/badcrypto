## ChaCha20

ChaCha20 is a stream cipher designed by Daniel J. Bernstein in 2008. It is an improvement on the Salsa20 cipher, which was also designed by Bernstein. The ChaCha cipher operates on a fixed-size block of data, typically 64 bytes, at a time. It uses a key, a nonce, and a block counter to generate a stream of pseudorandom bits, which are then XORed with the plaintext to produce the ciphertext.

## Pseudo Random Generators (PRGs)

The ChaCha cipher uses a pseudo-random generator (PRG) to produce a stream of pseudorandom bits. The PRG is a deterministic algorithm that takes the key, nonce, and block counter as input and produces a sequence of bits that appears random, but which can be reproduced given the same inputs.

ChaCha holds data in a 4x4 matrix consisting of 16 32 bit words containing the following data:

- The first row contains the constants "0x61707865", "0x3320646e", "0x79622d32", "0x6b206574" (ascii encoding of "expand 32-byte k")
- The second row contains the first 4 words of the key
- The third row contains the last 4 words of the key
- The fourth row contains the block counter (1 word) and the nonce (3 words)

|        |        |        |        |
|--------|--------|--------|--------|
| $c_1$  | $c_2$  | $c_3$  | $c_4$  |
| $k_1$  | $k_2$  | $k_3$  | $k_4$  |
| $k_5$  | $k_6$  | $k_7$  | $k_8$  |
| $b$    | $n_1$  | $n_2$  | $n_3$  |


Each iteration of the PRG produces a single 512 bit block of random data. The bit stream produced by the PRG is generated as needed, with the block counter being incremented and the algorithm being rerun to produce each new block. To produce the block, the PRG iteratively applies a series of operations to the matrix to scramble it. These operations include addition, XOR, and bitwise rotation.

The nonce value is typically chosen at random. It must be unique for each message that is encrypted, because reusing the same nonce is effectively creating a "two-time pad". With a two-time pad, the attacker has access to the ciphertext of two messages that were encrypted with the same random stream. An attacker can XOR these two ciphertexts together to cancel out the random stream and produce the XOR of the two plaintexts. If the plaintexts have any common words or patterns, the attacker may be able to recover parts of the message.

## Encryption

To encrypt a message with the ChaCha cipher, the following steps are performed:

1. The key and nonce are used to initialize the PRG.
2. The PRG produces a stream of pseudorandom bits.
3. The pseudorandom bits are XORed with the plaintext to produce the ciphertext.
4. The sender sends both the ciphertext and the nonce to the receiver.

## Decryption

To decrypt a message that has been encrypted with the ChaCha cipher, the following steps are performed:

1. The key and nonce are used to initialize the PRG.
2. The PRG produces the same stream of pseudorandom bits that was used to encrypt the message.
3. The pseudorandom bits are XORed with the ciphertext to produce the plaintext.

## How It Works

The PRG in the ChaCha cipher operates by iteratively applying a series of operations to the input data. These operations include addition, bitwise XOR, and bitwise rotation. The specific sequence of operations and the number of rounds used can vary, but the most common version of ChaCha uses 20 rounds. The PRG uses a "double-round" structure, which means that each round consists of two smaller rounds. This allows the cipher to operate more efficiently, as the double-round structure can be implemented using a single operation on some hardware architectures.

The constants used in the ChaCha cipher are a set of fixed values that are included in the input to the PRG. These constants have several important purposes:

- Reducing the amount of attacker-controlled input: By including constants in the input to the PRG, the designers of the ChaCha cipher are able to reduce the amount of input that an attacker can control. If the attacker only has control over a quarter of the input to the PRG, rather than half, it becomes more difficult for them to predict the output of the PRG. This helps to increase the security of the cipher in the common "attack game" approach to proving the security of ciphers, which involves trying to find an efficient way to distinguish the output of the PRG from a truly random stream.
- Preventing the all-zero block: The constants also help to prevent the PRG from generating an all-zero block as output. An all-zero block is not very effective at hiding data, and it could potentially reveal information about the plaintext to an attacker. By including constants in the input to the PRG, the designers of the ChaCha cipher are able to ensure that the PRG does not produce an all-zero block.

The constants used in the ChaCha cipher are also known as "nothing up my sleeve numbers." This phrase refers to the idea that the constants are chosen in a transparent and verifiable way, to ensure that they do not contain any hidden information or backdoors. In other words, the constants are chosen in a way that makes it clear that there is "nothing up my sleeve" â€“ no hidden tricks or secrets.

## Security

The security of the ChaCha cipher relies on the PRG being able to produce a stream of bits that is difficult for an attacker to predict or distinguish from a truly random stream. If the PRG is not truly random, then an attacker may be able to predict the output of the PRG and recover the plaintext of a message that has been encrypted with the ChaCha cipher.

As far as we know, the double-round technique for scrambling the matrix is secure. The state of the art attacks against ChaCha can currently ownly break through the first 7 of 20 rounds.
